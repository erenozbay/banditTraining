from supportingMethods import *
import pandas as pd


def chart(what):

    if what == 'mEq1':
        _ = None
        params_ = {'numOpt': 1, 'alpha': 0, 'totalSim': 50, 'numArmDists': 100, 'c': 4, 'delta': 0, 'm': 1,
                   'Switch': 'no', 'NADA': 'no'}

        ADAETC_ = {'regret': [19.56778972, 27.45723051 ,35.18484856 ,41.00617244 ,45.74863922,
                              49.77503226, 50.69719115, 54.42111542 ,59.5791575 , 64.56580699],
                   'standardError': [0.3644054 , 0.56223167, 0.72775673 ,0.93374901 ,1.17019494,
                                     1.29561817, 1.24720138, 1.44258628 ,1.60743669, 1.80647786],
                   'cumReg': [9.72458972, 14.37343051, 17.12504856, 19.18937244, 22.17583922,
                              22.96683226, 25.36579115, 26.12011542, 26.9521575 , 28.19920699],
                   'standardError_cumReg': [0.24828086, 0.28371712, 0.31737028, 0.40331662, 0.47891059,
                                            0.52335165 , 0.40122419, 0.55113041 ,0.58367662 ,0.54812714]}

        ETC_ = {'regret': [23.35858972  ,35.77663051  ,46.23724856 , 57.76757244 , 65.15303922,
  76.27923226,  80.68139115,  84.80311542 , 93.9383575 , 103.16960699],
                   'standardError': [0.41307597, 0.68744332 ,0.78629774, 1.07515371 ,1.00531511, 1.22516287,
 1.48462943 ,1.71805795, 1.67681959, 1.8899216],
                   'cumReg': [12.02598972 ,19.67323051 ,24.18004856 ,30.00677244 ,34.93463922 ,40.88263226,
 44.62739115, 46.05211542, 49.4407575 , 52.48180699],
                   'standardError_cumReg': [0.37739695, 0.55971575 ,0.70721618, 0.95059853, 1.0747166 , 1.27887188,
 1.14086757, 1.3030329 , 1.35794239 ,1.55265129]}

        UCB1_stopping_ = {'regret': [23.57938972 ,35.97703051 ,45.62244856 ,56.37217244 ,63.25643922, 70.76463226,
 75.50199115, 79.33031542, 87.1443575 , 94.39320699],
                   'standardError': [0.43103052 ,0.64648897 ,0.77277199, 1.01132228 ,0.97741432 ,1.1280968,
 1.29747633, 1.5399448  ,1.57169727, 1.68919059],
                   'cumReg': [12.23518972, 19.94683051 ,23.61444856 ,28.76237244 ,33.38563922 ,36.02283226,
 40.23759115, 41.21591542, 43.5443575,  45.04460699],
                   'standardError_cumReg': [0.37091571, 0.52789059 ,0.68266774 ,0.76542258, 0.84203742 ,0.91680357,
 0.75702919, 0.97863513 ,0.95935586 ,1.02504111]}

        TS = {'regret': [21.26998972 , 35.77603051 , 48.59764856  ,73.64177244 , 84.29603922,
  95.86843226, 121.70219115 ,150.21571542, 159.6511575  ,167.02740699],
                   'standardError': [1.76005815 , 3.6900991  , 5.41201988 , 8.72823624  ,9.56067175 ,11.83699789,
 13.71592589 ,16.52007036 ,17.38601032 ,18.53797595],
                   'cumReg': [15.46298972  ,28.44523051 , 37.45564856  ,61.79937244 , 71.52543922,
  78.57463226, 106.73039115 ,130.02111542 ,140.5285575,  147.05720699],
                   'standardError_cumReg': [1.68106034,  3.47562269 , 5.26988172 , 8.41274137 , 9.39174514 ,11.58399363,
 13.28753343 ,16.27305372 ,17.43371462 ,17.92173012]}

        naiveUCB1_ = {'regret': [31.65082796,  52.45114594,  64.46892482,  75.40060185 , 91.78144687,
  97.52495751,109.75536699 ,125.79539992 ,130.81545168, 146.09552146],
                   'standardError': [0.73764664 ,1.70135042, 2.40678826 ,3.01132812 ,3.8663281 , 4.77634743,
 5.53085932 ,5.93470852, 7.53935536 ,7.8163795],
                   'cumReg': [10.69242796 ,14.64354594 ,18.08217482 ,19.96250185, 22.32794687, 23.21255751,
 24.93371699, 26.61674992 ,27.27195168 ,28.36057146],
                   'standardError_cumReg': [0.17127538, 0.20584208 ,0.18994596 ,0.21784004 ,0.22602579, 0.27283165,
 0.29979136, 0.3125517 , 0.31720533 ,0.,34520644]}
        for i in range(0, 2):
            plot_fixed_m(i, [4], np.arange(1, 11) * 100, naiveUCB1_, TS, ADAETC_, ETC_,
                         _, UCB1_stopping_, _, _, params_)

    if what == 'correctionEff':
        # comparing the average reward generated per worker when there is a decrease in the job budget (aka correction) and not
        algs = {'No correction': {}, 'Correction': {}}
        results = {}
        for keys in algs.keys():
            results[keys] = {}
            results[keys]['reward'] = np.zeros(5)
            results[keys]['stError'] = np.zeros(5)
        results['No correction']['reward'] = np.array([20.7918868 , 21.61003976, 21.84315322, 21.97463225, 21.98947917])
        results['No correction']['stError'] = np.array([0.02539254, 0.02300426, 0.026723  , 0.03111734, 0.02428462])
        results['Correction']['reward'] = np.array([16.34200207, 18.09194094, 18.81012356, 18.87089395, 18.95107008])
        results['Correction']['stError'] = np.array([0.02039381, 0.01717116, 0.01386809, 0.01475072, 0.01188174])
        plot_market_mBased(algs, 5, 20, 200, results, 100, 10, 3, True, True)
        # exit()


    if what == 'rewardGen':
        #### average reward generated per worker, w/o correction (full budget)
        # for m_cohort = 5, K = 20, T = 200
        algs = {'ADA-ETC': {'reward': np.array([20.7918868, 21.61003976, 21.84315322, 21.97463225, 21.98947917]),
                            'stError': np.array([0.02539254, 0.02300426, 0.026723, 0.03111734, 0.02428462])},
                'UCB1-I-s': {'reward': np.array([19.17337504, 19.93878915, 20.22503975, 20.42722366, 20.55166667]),
                             'stError': np.array([0.02217119, 0.01561478, 0.01691593, 0.02275115, 0.02603317])},
                'ETC': {'reward': np.array([19.16614668, 19.93375755, 20.23755365, 20.40156397, 20.52114583]),
                        'stError': np.array([0.01426046, 0.02303187, 0.01985064, 0.02350257, 0.02520644])}}

        # for m_cohort = 5, K = 10, T = 100
        algs = {'ADA-ETC': {'reward': np.array([10.21263158, 10.6371308 , 10.8014862 , 10.95083906, 11.08857698]),
                            'stError': np.array([0.04638999, 0.03018544, 0.03206184, 0.03275941, 0.03400805])},
                'UCB1-I-s': {'reward': np.array([9.84442105, 8.5185654 , 8.68535032, 8.83094316, 8.8487234 ]),
                             'stError': np.array([0.03833138, 0.02630916, 0.02473314, 0.0306233 , 0.02820266])},
                'ETC': {'reward': np.array([9.81494737, 8.4, 8.59426752, 8.73331385, 8.78212766]),
                        'stError': np.array([0.03674861, 0.02046453, 0.02731038, 0.02197356, 0.02271057])}}
        plot_market_mBased(algs, 5, 20, 200, algs, 100, 10, 3, True, True)
        ####



    if what == 'fullSamplePath':

        # for m_cohort = 5, K = 20, T = 200; sample path of average cohort queue lengths
        algs = {'No correction': {}, 'Correction': {}}
        colors = ['red', 'navy', 'mediumseagreen', 'magenta', 'purple', 'blue']
        labels = list(algs.keys())
        counter = 0
        plt.figure(figsize=(7, 5), dpi=100)
        plt.rc('axes', axisbelow=True)
        plt.grid()
        results = {}
        rews = pd.read_csv('correctionSamplePath.csv')
        # print(rews)
        # exit()
        for keys in algs.keys():
            results[keys] = {}
            results[keys]['reward'] = rews[keys].to_numpy()

        # T: 2000, 4000, ..., 20000
        # arr = np.arange(1, 11) * 2000
        # results['No correction']['reward'] = np.array([0.193, 0.2795, 0.271, 0.9905, 1.803, 2.385, 3.287, 4.088, 4.1325, 3.585])
        # results['Correction']['reward'] = np.array([0.172, 0.1795, 0.185, 0.2035, 0.185, 0.2035, 0.185, 0.2035, 0.1665, 0.185])
        # T: 4000, 8000, ..., 20000
        # arr = np.arange(1, 6) * 4000
        # results['No correction']['reward'] = np.array([0.23625, 0.63075, 2.094, 3.6875, 3.85875])
        # results['Correction']['reward'] = np.array([0.17575, 0.19425, 0.19425, 0.19425, 0.17575])
        # T: 1000, 2000, ..., 20000
        # arr = np.arange(1, 21) #* 1000
        # results['No correction']['reward'] = np.array([0.164, 0.222, 0.298, 0.261, 0.279, 0.263, 0.749, 1.232, 1.68, 1.926,
        #                                                1.973, 2.797, 2.961, 3.613, 3.963, 4.213, 4.287, 3.978, 3.617, 3.553])
        # results['Correction']['reward'] = np.array([0.148, 0.196, 0.174, 0.185, 0.185, 0.185, 0.222, 0.185, 0.185, 0.185,
        #                                             0.185, 0.222, 0.185, 0.185, 0.216, 0.191, 0.148, 0.185, 0.185, 0.185])
        for keys in algs.keys():
            plt.plot(range(1, 20001), results[keys]['reward'], color=colors[counter], label=labels[counter], marker='o',
                     markersize=3)
            counter += 1
        plt.ylabel('Active Cohorts', fontsize=13)
        plt.xlabel('Time', fontsize=13)
        title = 'marketSim/activeCohorts.eps'
        plt.legend(loc="upper left", bbox_to_anchor=(1, 1.02))
        plt.savefig(title, format='eps', bbox_inches='tight')
        # exit()

    if what == 'twoFifth':
        # T^(2/5), improved UCB1, ucbpart = 1
        _ = None
        params_ = {'numOpt': 1, 'alpha': 0, 'totalSim': 50, 'numArmDists': 50, 'c': 4, 'delta': 0, 'm': 1,
                   'Switch': 'no', 'NADA': 'no'}
        ADAETC_ = {'regret': [106.2216, 165.4292 ,226.1592, 264.8548,
        311.9076 ,344.1032, 388.3564,421.2,
        453.3956 ,492.7364],
                   'standardError': [1.80751337, 2.86525309, 3.86734538, 4.70186376 ,5.15582829,5.60920453, 7.69002027 ,6.84203927, 9.32652529, 6.81546917],
                   'cumReg': [39.18 ,   58.3364 , 84.6028 , 94.4412,
        112.4764 ,120.0512 ,137.9924, 148.3908, 156.1212 ,173.434],
                   'standardError_cumReg': [1.72455666, 2.64040662, 3.72519263,
        4.27413252, 4.77943052, 5.33168483, 7.08071626, 6.40693852, 8.96722898, 6.71009931]}

        naiveUCB1_ = {'regret': [221.2456, 389.5332, 554.0208, 698.3468, 851.0892, 976.4668,
                                 1125.2848, 1255.0708, 1395.702,  1511.638],
                   'standardError': [2.58748607, 3.29966566, 6.50244956, 6.3839321,  8.62163155 , 8.24497758,
                                     11.02386211, 11.66935651, 15.05881182 ,13.79416748],
                   'cumReg': [27.0304, 39.4696, 48.3272, 53.6536, 57.6648, 66.076,
                              68.7296, 74.5868, 78.8096, 81.72],
                   'standardError_cumReg': [0.7272291,  0.88555506, 1.11637883, 1.68913483, 1.52418398, 1.51760401,
                                            1.50204248, 1.7449531 , 2.23791869, 1.92259691]}

        TS = {'regret': [158.7252 ,272.846 , 377.652 , 481.4392,
        562.2912, 672.7588 ,762.2116, 858.5032, 934.1072 , 1044.7212],
                   'standardError': [3.66455689 , 4.06153115 , 6.97285266,
        8.27018924 , 11.02026969, 12.88247287,
        11.80161432 ,16.63171256 ,17.54814778 ,24.16399333],
                   'cumReg': [21.0944 ,28.1644 ,33.1996 , 37.3392,
        43.8232, 46.5088, 52.16 ,  53.9064 ,57.858, 59.3684],
                   'standardError_cumReg': [0.80722835 , 1.05387973 ,1.2217753,
        1.35071133 ,1.91220922, 1.62777514,
        1.84135993 , 2.40475452, 1.92861237, 2.66048748]}


        # BAI_ETC = {'regret': [414.7868  ,759.6912 ,1061.7624,
        # 1374.8176 ,1660.5168 , 1958.6036, 2230.3876,
        # 2514.0276 ,2815.508 ,3062.2936],
        #            'standardError': [2.73398713 , 5.78280016 ,  8.64533816,
        # 11.16795315,  9.08824157 ,16.23198425,
        # 19.64800449, 13.27106339 ,20.21784437, 24.65986965],
        #            'cumReg': [51.838 ,  74.3724 , 91.1344 ,  105.4552,
        # 116.1392 , 129.6028 , 139.1632 , 150.6468, 161.0628, 169.062],
        #            'standardError_cumReg': [0.63019495,  0.88501551, 1.24706568,
        # 1.62976117,  1.57622709, 1.90432006,
        # 2.16543556, 2.18757785, 2.27256761, 2.14053184]}
        plot_fixed_m(4, np.array([2]), np.arange(1, 11) * 4000, naiveUCB1_, TS, ADAETC_, _, _, _, _, _, params_, _)
        plot_fixed_m(5, np.array([2]), np.arange(1, 11) * 4000, naiveUCB1_, TS, ADAETC_, _, _, _, _, _, params_, _)

    if what == 'oneHalf':
        # \sqrt(1/T), improved UCB1, ucbpart = 1
        _ = None
        params_ = {'numOpt': 1, 'alpha': 0, 'totalSim': 50, 'numArmDists': 50, 'c': 4, 'delta': 0, 'm': 1,
                   'Switch': 'no', 'NADA': 'no'}

        ADAETC_ = {'regret': [97.5164, 151.4216, 194.9364, 236.412 , 272.4296, 302.5492, 338.1156, 368.3088,
        395.8652, 415.9624],
                   'standardError': [1.07559423 ,1.46838827 ,1.53084956 ,1.62199453 ,1.96503584, 1.92739494,
        2.38879908, 2.3789014,  3.17494042 ,3.04434078],
                   'cumReg': [26.114,  37.5064, 46.1892 ,55.238 , 61.8116 ,65.7916 ,74.2252 ,80.4696, 83.3824,
        81.7276],
                   'standardError_cumReg': [1.06373053, 1.34378932 ,1.5213265 , 1.55230494, 1.7607603  ,1.76695925,
        2.31604303, 2.15025559 ,3.01808054 ,2.81061393]}


        naiveUCB1_ = {'regret': [630.4708, 1260.9296, 1887.288,
                                 2506.0288, 3173.804,  3748.0984,
                                 4330.356, 5039.61,
                                 5664.2916, 6340.9052],
                      'standardError': [4.3762902,   9.07352097, 15.13254789 ,
                                        19.30916686, 23.59468447, 25.85185779,
                                        32.67630894, 36.7469925, 41.94288796, 41.58926675],

                      'cumReg': [21.5584, 30.5076, 37.8444,
                                 45.66, 49.8888, 54.6104,
                                 55.944, 59.3684,
                                 65.2064, 65.4948],

                      'standardError_cumReg': [0.65557543, 0.87491968, 1.11504106,
                                               1.41580032, 1.30318038, 1.49532597,
                                               1.50990638, 1.65321477,
                                               2.02998266, 2.30605601]}


        TS = {'regret': [470.8328,  927.4832 ,1392.3784 ,1854.382 , 2361.9224, 2791.6456, 3156.176,
        3593.1492, 4206.51 ,  4625.9212],
                   'standardError': [5.66695595 ,11.36099638, 15.17637434, 24.14649594, 27.99723975, 31.50112148,
        37.88810656, 47.43666132, 50.51807718, 70.90713375],
                   'cumReg': [19.7404, 30.2608, 37.3056 ,41.484 , 47.7572 ,54.9268, 56.1792 ,62.7132 ,66.9092,
        66.3852],
                   'standardError_cumReg': [0.70153032 ,1.02419326 ,1.24305341 ,1.51641651, 1.5811615 , 1.89170185,
        1.8662816  ,2.12419514, 2.06790686 ,1.7672544 ]}

        # BAI_ETC = {'regret': [834.0208 ,1627.1156, 2461.3596, 3256.86 ,  4069.2488, 4864.5528 ,5703.3144,
        # 6454.8412, 7344.234 , 8108.0912],
        #       'standardError': [3.7035998,   6.27304025 ,10.55710849, 13.29890314, 16.47365265, 26.8346309,
        # 20.63102387 ,28.79485515, 30.25749889 ,31.40073152],
        #       'cumReg': [26.79 ,  35.9132, 46.7516, 52.8188, 60.8248, 63.9256, 70.492,  78.0236, 80.3424,
        # 84.92],
        #       'standardError_cumReg': [0.67708889 ,0.95783065 ,1.06015049, 1.47891392, 1.37720535, 1.50574548,
        # 1.44731553 ,1.74474688, 1.84977937, 2.15997496]}

        plot_fixed_m(4, np.array([2]), np.arange(1, 11) * 4000, naiveUCB1_, TS, ADAETC_, _, _, _, _, _, params_,
                     _)
        plot_fixed_m(5, np.array([2]), np.arange(1, 11) * 4000, naiveUCB1_, TS, ADAETC_, _, _, _, _, _, params_,
                     _)