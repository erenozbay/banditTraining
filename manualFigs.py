from supportingMethods import *
import pandas as pd


def chart(what):
    if what == 'mEq1':
        _ = None
        # m  1  K  [4]  alpha 0, ucb1 ucb part 1, nada-etc ucb part 1, TS fixed, ucb's not improved
        params_ = {'numOpt': 1, 'alpha': 0, 'totalSim': 50, 'numArmDists': 200, 'c': 4, 'delta': 0, 'm': 1,
                   'Switch': 'no', 'NADA': True}

        ADAETC_ = {'regret': [19.13359134, 28.51776433, 35.13843861 ,40.92118348, 44.14395605 ,48.83482082,
 55.39376134 ,54.9719381 , 60.1699701 , 63.03596101],
                   'standardError': [0.24535924, 0.36083017, 0.49132249, 0.60212353 ,0.73091006, 0.86005372,
 0.94018997, 0.95168749, 1.16922303, 1.22557087]}

        ETC_ = {'regret': [23.52889134 , 36.56396433 , 46.86743861 , 56.77478348 , 64.00355605,
  73.43892082 , 83.81936134 , 89.2069381 ,  92.6870701  ,101.14386101],
                'standardError': [0.29715866, 0.41166634 ,0.57891144 ,0.69392307, 0.8072775 , 0.94410349,
 0.88873734, 1.06344072, 1.23301933, 1.22866647]}

        # NADA-ETC
        UCB1_stopping_ = {'regret': [21.6233695 , 33.1599575 , 41.36143226 ,47.94539089, 53.56142313, 60.7909568,
 64.93946885, 68.56443523, 72.58474524,75.25125475],
                          'standardError': [0.28932423, 0.43077255, 0.53558216, 0.69391342, 0.77259411 ,0.91424894,
 1.02046565,1.22055541 ,1.29327834 ,1.41121096]}

        TS = {'regret': [18.99039134 ,30.38186433 ,38.88983861 ,46.72928348 ,52.31635605, 57.61702082,
 59.13286134, 60.9484381 , 73.5872701 , 75.55586101],
              'standardError': [0.51651904, 1.08116695, 1.59208875, 2.12356315, 2.73393959, 3.01553565,
 3.35254608 ,3.74989653 ,4.3891696 , 4.54949454]}

        naiveUCB1_ = {'regret': [30.98169134 , 54.06896433 , 74.53563861  ,93.27568348 ,102.89965605,
 120.60352082, 136.35336134, 138.2080381  ,160.1438701,  169.20216101],
                      'standardError': [0.76772603, 1.54538929, 2.35978057, 3.23379071 ,4.12070684, 5.13595677,
 5.94458502 ,6.49859512, 7.75397013, 8.27772603]}
        for i in range(2):
            plot_fixed_m(i, [4], np.arange(1, 11) * 100, naiveUCB1_, TS, ADAETC_, ETC_,
                         UCB1_stopping_, _, params_)

        plot_fixed_m(-1, [4], np.arange(1, 11) * 100, naiveUCB1_, TS, ADAETC_, ETC_, UCB1_stopping_, _, params_)
        # m  1  K [4]  alpha 0, ucb1 ucb part 1, nada-etc ucb part 1, TS fixed, ucb's not improved



        # K=4, m=1, alpha 0.4 ucb1 ucb part 1, nada-etc ucb part 1, TS fixed, ucb's not improved,
        params_ = {'numOpt': 1, 'alpha': 0.4, 'totalSim': 50, 'numArmDists': 200, 'c': 4, 'delta': 0, 'm': 1,
                   'Switch': 'no', 'NADA': True}

        ADAETC_ = {'regret': [15.49354214 ,25.42101413 ,33.78036964 ,42.05599267, 48.67766885 ,55.27943272,
 61.44026065,67.16302045, 73.10629451 ,77.87731853],
                   'standardError': [0.11625402, 0.21818408 ,0.29570132, 0.36466808, 0.41154685, 0.47452507,
 0.56671457, 0.57104777 ,0.62262331 ,0.61924753]}

        ETC_ = {'regret': [16.62954214, 27.26571413 ,36.19876964 ,45.77819267 ,52.52836885 ,60.83153272,
 68.07996065, 74.67842045 ,79.31859451 ,85.48901853],
                'standardError': [0.12554487 ,0.20543356, 0.28900322, 0.37054688, 0.44629681, 0.49954981,
 0.59441377, 0.58728469, 0.62946699, 0.64238898]}

        # NADA-ETC
        UCB1_stopping_ = {'regret': [16.62105378 ,27.64511123 ,35.74133121 ,45.03938099, 52.45177892, 60.42384005,
 67.89396293, 74.93831105 ,79.52821142, 85.15899425],
                          'standardError': [0.12201202, 0.23585374, 0.28723909 ,0.39138504, 0.41196328, 0.46777682,
 0.55861972 ,0.61208852, 0.67889289, 0.65438022]}

        TS = {'regret': [27.20564214 , 51.93331413  ,75.46946964  ,94.65999267 ,116.76736885,
 135.67293272 ,153.76276065, 169.86772045, 187.62579451, 206.11611853],
              'standardError': [.12866309, 0.24202676, 0.43701095, 0.70476775 ,1.02838134, 1.16655845,
 1.67680081, 1.90956632, 2.37322408, 2.75703718]}

        naiveUCB1_ = {'regret': [32.46234214 , 64.83461413  ,96.56526964 ,125.55219267 ,155.56036885,
 185.08413272 ,212.15586065, 238.83432045 ,266.52569451 ,296.65751853],
                      'standardError': [0.13990426, 0.28749187, 0.43835493, 0.61776897, 0.93113037 ,1.1060847,
 1.49465075 ,1.71207337 ,2.30434167 ,2.41464404]}
        for i in range(2):
            plot_fixed_m(i, [4], np.arange(1, 11) * 100, naiveUCB1_, TS, ADAETC_, ETC_,
                         UCB1_stopping_, _, params_)
        #  K=4, m=1, alpha 0.4 ucb1 ucb part 1, nada-etc ucb part 1, TS fixed, ucb's not improved,


        #  K=8, m=1, alpha 0 ucb1 ucb part 1, nada-etc ucb part 1, TS fixed, ucb's not improved,
        params_ = {'numOpt': 1, 'alpha': 0, 'totalSim': 50, 'numArmDists': 200, 'c': 4, 'delta': 0, 'm': 1,
                   'Switch': 'no', 'NADA': True}

        ADAETC_ = {'regret': [34.26864827 , 49.10257204 , 61.32387687  ,70.73263348,  79.37625005,
  85.67353789 , 93.97594876 , 99.91315438 ,106.53040101, 113.10353486],
                   'standardError': [0.26539322, 0.42012604, 0.5502746 , 0.65133306, 0.78829906, 0.867308,
 0.96412645 ,1.10678032, 1.25960256, 1.19774997]}

        ETC_ = {'regret': [40.36274827  ,60.59707204 , 80.78257687 , 95.51013348 ,107.87685005,
 119.34573789, 133.30834876, 146.88965438, 159.46940101, 166.16303486],
                'standardError': [0.27049488, 0.47161624, 0.56008046, 0.54557757, 0.66943419, 0.81202989,
 0.95889308,0.8888513 , 1.20103344, 1.18320171]}
        # NADA-ETC
        UCB1_stopping_ = {'regret': [39.11556328 , 58.85975882,  73.29724227 , 85.46706932  ,96.2455488,
 105.82724603 ,114.18859572 ,124.2578406 ,131.0707333 , 139.14769182],
                          'standardError': [0.2822089 , 0.40941395, 0.4948836,  0.61731165 ,0.76124035, 0.8776191,
 0.89331665, 0.99437605, 1.23873617, 1.3159867]}

        TS = {'regret': [36.98774827 , 57.02507204 , 72.05977687 , 78.79233348,  94.92545005,
 106.22003789, 121.74754876 ,119.68625438 ,125.56160101, 139.37923486],
              'standardError': [0.52797026 ,1.27022511, 2.0966677 , 2.76527546, 3.37739994 ,4.2310494,
 4.55253781, 5.35566246 ,5.56404398 ,6.37495564]}

        naiveUCB1_ = {'regret': [58.30224827 ,103.63917204, 144.26547687,176.87223348 ,209.89995005,
 236.52773789, 274.19784876 ,285.74455438, 313.61430101 ,347.55093486],
                      'standardError': [0.62289006, 1.44047987 ,2.43458304 ,3.34647492 ,4.5278966,  5.51528898,
 6.39027531, 7.90698653, 8.4729336,  9.43145619]}

        for i in range(2):
            plot_fixed_m(i, [8], np.arange(1, 11) * 100, naiveUCB1_, TS, ADAETC_, ETC_,
                         UCB1_stopping_, _, params_)
        plot_fixed_m(-1, [8], np.arange(1, 11) * 100, naiveUCB1_, TS, ADAETC_, ETC_, UCB1_stopping_, _, params_)
        #  K=8, m=1, alpha 0 ucb1 ucb part 1, nada-etc ucb part 1, TS fixed, ucb's not improved,
        # exit()

        #  K=8, m=1, alpha 0.4 ucb1 ucb part 1, nada-etc ucb part 1, TS fixed, ucb's not improved,
        params_ = {'numOpt': 1, 'alpha': 0.4, 'totalSim': 50, 'numArmDists': 200, 'c': 4, 'delta': 0, 'm': 1,
                   'Switch': 'no', 'NADA': True}

        ADAETC_ = {'regret': [23.93402438,  38.16820514 , 50.53106591  ,61.86378833 , 71.99104461,
  82.23095652 , 92.13534604 ,102.37089652, 110.0411677 , 118.2418378],
                   'standardError': [0.1030573  ,0.20096803, 0.29074138 ,0.36399924 ,0.4103257,  0.50506876,
 0.61485177, 0.678651 ,  0.71989344, 0.75504715]}

        ETC_ = {'regret': [26.00842438  ,41.53170514 , 56.81276591,  67.61928833 , 78.83914461,
  90.39045652, 100.78654604 ,112.90509652, 123.1496677 , 130.0047378],
                'standardError': [0.09897821, 0.19777256, 0.30193331, 0.36153262 ,0.40827234 ,0.51899811,
 0.64840688, 0.65995612, 0.7200173,  0.83571003]}

        # NADA-ETC
        UCB1_stopping_ = {'regret': [25.81971222,  41.45109955 , 56.4456646  , 67.93874054,  79.01719507,
  89.66288977, 101.93587466 ,111.91985997, 121.10704018 ,127.59266862],
                          'standardError': [0.11337945, 0.20341241, 0.29942571, 0.35353799, 0.45098886 ,0.54288543,
 0.52089415, 0.65318837, 0.78344088 ,0.74329462]}

        TS = {'regret': [38.58022438,  76.44380514, 112.34436591, 147.14158833 ,181.86174461,
 213.41885652 ,244.85954604, 273.13619652, 304.0200677  ,329.7796378],
              'standardError': [0.10391251 ,0.20674055, 0.33221996, 0.47535365 ,0.58165367, 0.82026007,
 1.03975089 ,1.26536914,1.64791252, 2.03866701]}

        naiveUCB1_ = {'regret': [43.21242438 , 87.18490514 ,130.53716591 ,173.50958833 ,215.77414461,
 258.92355652, 299.22294604 ,340.34049652, 382.3026677 , 420.4523378],
                      'standardError': [0.10406189 ,0.22323033, 0.28978037 ,0.4398939 , 0.50760614, 0.62862777,
 0.74495848, 0.83548146, 1.04307252 ,1.23162909]}
        for i in range(2):
            plot_fixed_m(i, [8], np.arange(1, 11) * 100, naiveUCB1_, TS, ADAETC_, ETC_,
                         UCB1_stopping_, _, params_)
        #  K=8, m=1, alpha 0.4 ucb1 ucb part 1, nada-etc ucb part 1, TS fixed, ucb's not improved,






    if what == 'correctionEff':
        # comparing the average reward generated per worker when there is a decrease in the job budget (aka correction) and not
        algs = {'No correction': {}, 'Correction': {}}
        results = {}
        for keys in algs.keys():
            results[keys] = {}
            results[keys]['reward'] = np.zeros(5)
            results[keys]['stError'] = np.zeros(5)
        results['No correction']['reward'] = np.array([20.7918868 , 21.61003976, 21.84315322, 21.97463225, 21.98947917])
        results['No correction']['stError'] = np.array([0.02539254, 0.02300426, 0.026723  , 0.03111734, 0.02428462])
        results['Correction']['reward'] = np.array([16.34200207, 18.09194094, 18.81012356, 18.87089395, 18.95107008])
        results['Correction']['stError'] = np.array([0.02039381, 0.01717116, 0.01386809, 0.01475072, 0.01188174])
        plot_market_mBased(algs, 5, 20, 200, results, 100, 10, 3, True, True)
        # exit()


    if what == 'rewardGen':
        #### average reward generated per worker, w/o correction (full budget)
        # for m_cohort = 5, K = 20, T = 200 - UCB1-s with ucb part 1
        algs = {'ADA-ETC': {'reward': np.array([20.7918868, 21.61003976, 21.84315322, 21.97463225, 21.98947917]),
                            'stError': np.array([0.02539254, 0.02300426, 0.026723, 0.03111734, 0.02428462])},
                'NADA-ETC': {'reward': np.array([19.42566265, 20.0535027 , 20.35258799, 20.43729167, 20.5744364]),
                             'stError': np.array([0.01782533, 0.01883545, 0.01624, 0.01389427, 0.01249628])},
                # 'UCB1-s': {'reward': np.array([19.5473251 , 20.09390496, 20.26961631, 20.43254237, 20.556875]),
                #              'stError': np.array([0.01601684, 0.01315148, 0.01227954, 0.0148709 , 0.01053436])},
                # UCB1-I-s {'reward': array([9712.65, 9750.55, 9886.1 , 9865.15, 9875.8 ]), 'stError': array([14.83216185,  6.37143822, 12.01583955,  8.10206918,  5.86490409])}
                'ETC': {'reward': np.array([19.16614668, 19.93375755, 20.23755365, 20.40156397, 20.52114583]),
                        'stError': np.array([0.01426046, 0.02303187, 0.01985064, 0.02350257, 0.02520644])}}
        plot_market_mBased(algs, 5, 20, 200, algs, 100, 10, 3, False, True, True)

        # for m_cohort = 5, K = 10, T = 100 - UCB1-s with ucb part 1
        algs = {'ADA-ETC': {'reward': np.array([10.12263158, 10.6071308 , 10.8414862 , 10.95083906, 10.98857698]),
                            'stError': np.array([0.02638999, 0.02018544, 0.02206184, 0.02275941, 0.02400805])},
                'NADA-ETC': {'reward': np.array([10.04136243, 10.47217998, 10.61772824, 10.74364407, 10.84478126]),
                             'stError': np.array([0.0126638 , 0.01265853, 0.00818917, 0.00791463, 0.01247301])},
                # 'UCB1-s': {'reward': np.array([10.082, 10.44906416, 10.62929936, 10.78154969, 10.86053191]),
                #              'stError': np.array([0.01586532, 0.01438363, 0.01503702, 0.01512474, 0.01183239])},
                # UCB1-I-s {'reward': array([4782.1 , 4945.65, 5002.15, 5050.35, 5066.4 ]), 'stError': array([8.08024752, 7.77669756, 5.93270807, 6.46123247, 9.21853568])}
                'ETC': {'reward': np.array([9.76494737, 10.22, 10.47, 10.58, 10.63212766]),
                        'stError': np.array([0.02674861, 0.02046453, 0.02731038, 0.02197356, 0.02271057])}}
        plot_market_mBased(algs, 5, 10, 100, algs, 100, 10, 3, False, True, True)
        ####



    if what == 'fullSamplePath':

        # for m_cohort = 5, K = 20, T = 200; sample path of average cohort queue lengths
        algs = {'No correction': {}, 'Correction': {}}
        colors = ['red', 'navy', 'mediumseagreen', 'magenta', 'purple', 'blue']
        labels = list(algs.keys())
        counter = 0
        plt.figure(figsize=(7, 5), dpi=100)
        plt.rc('axes', axisbelow=True)
        plt.grid()
        results = {}
        rews = pd.read_csv('correctionSamplePath.csv')
        # print(rews)
        # exit()
        for keys in algs.keys():
            results[keys] = {}
            results[keys]['reward'] = rews[keys].to_numpy()

        # T: 2000, 4000, ..., 20000
        # arr = np.arange(1, 11) * 2000
        # results['No correction']['reward'] = np.array([0.193, 0.2795, 0.271, 0.9905, 1.803, 2.385, 3.287, 4.088, 4.1325, 3.585])
        # results['Correction']['reward'] = np.array([0.172, 0.1795, 0.185, 0.2035, 0.185, 0.2035, 0.185, 0.2035, 0.1665, 0.185])
        # T: 4000, 8000, ..., 20000
        # arr = np.arange(1, 6) * 4000
        # results['No correction']['reward'] = np.array([0.23625, 0.63075, 2.094, 3.6875, 3.85875])
        # results['Correction']['reward'] = np.array([0.17575, 0.19425, 0.19425, 0.19425, 0.17575])
        # T: 1000, 2000, ..., 20000
        # arr = np.arange(1, 21) #* 1000
        # results['No correction']['reward'] = np.array([0.164, 0.222, 0.298, 0.261, 0.279, 0.263, 0.749, 1.232, 1.68, 1.926,
        #                                                1.973, 2.797, 2.961, 3.613, 3.963, 4.213, 4.287, 3.978, 3.617, 3.553])
        # results['Correction']['reward'] = np.array([0.148, 0.196, 0.174, 0.185, 0.185, 0.185, 0.222, 0.185, 0.185, 0.185,
        #                                             0.185, 0.222, 0.185, 0.185, 0.216, 0.191, 0.148, 0.185, 0.185, 0.185])
        for keys in algs.keys():
            plt.plot(range(1, 20001), results[keys]['reward'], color=colors[counter], label=labels[counter])
            counter += 1
        plt.ylabel('Active Cohorts', fontsize=13)
        plt.xlabel('Time', fontsize=13)
        title = 'marketSim/activeCohorts_100sim.eps'
        plt.legend(loc="upper left", bbox_to_anchor=(1, 1.02))
        plt.savefig(title, format='eps', bbox_inches='tight')
        # exit()

    if what == 'twoFifth':
        # T^(2/5), improved UCB1, ucbpart = 1
        _ = None
        params_ = {'numOpt': 1, 'alpha': 0, 'totalSim': 50, 'numArmDists': 50, 'c': 4, 'delta': 0, 'm': 1,
                   'Switch': 'no', 'NADA': 'no'}
        ADAETC_ = {'regret': [106.2216, 165.4292 ,226.1592, 264.8548,
        311.9076 ,344.1032, 388.3564,421.2,
        453.3956 ,492.7364],
                   'standardError': [1.80751337, 2.86525309, 3.86734538, 4.70186376 ,5.15582829,5.60920453, 7.69002027 ,6.84203927, 9.32652529, 6.81546917],
                   'cumReg': [39.18 ,   58.3364 , 84.6028 , 94.4412,
        112.4764 ,120.0512 ,137.9924, 148.3908, 156.1212 ,173.434],
                   'standardError_cumReg': [1.72455666, 2.64040662, 3.72519263,
        4.27413252, 4.77943052, 5.33168483, 7.08071626, 6.40693852, 8.96722898, 6.71009931]}

        # with improved UCB
        # naiveUCB1_ = {'regret': [221.2456, 389.5332, 554.0208, 698.3468, 851.0892, 976.4668,
        #                          1125.2848, 1255.0708, 1395.702,  1511.638],
        #            'standardError': [2.58748607, 3.29966566, 6.50244956, 6.3839321,  8.62163155 , 8.24497758,
        #                              11.02386211, 11.66935651, 15.05881182 ,13.79416748],
        #            'cumReg': [27.0304, 39.4696, 48.3272, 53.6536, 57.6648, 66.076,
        #                       68.7296, 74.5868, 78.8096, 81.72],
        #            'standardError_cumReg': [0.7272291,  0.88555506, 1.11637883, 1.68913483, 1.52418398, 1.51760401,
        #                                     1.50204248, 1.7449531 , 2.23791869, 1.92259691]}

        # without improved UCB
        naiveUCB1_ = {'regret': [324.924, 608.202, 872.8028, 1130.7788, 1367.0208,
                                 1644.7472, 1882.3836, 2137.756, 2372.6668, 2628.7884],
                      'standardError': [2.68515558,  4.24460117, 5.89778486,  6.75237647,  7.90772289,
                                        11.96113069, 11.96484253, 15.47722964, 14.08666423, 17.63775148],
                      'cumReg': [41.65, 61.1236, 74.0088, 88.2276, 96.1764, 109.4948,
                                 116.1976, 126.4284, 134.6744, 142.5756],
                      'standardError_cumReg': [0.75295222, 1.00455247, 1.13707388, 1.47577244, 1.21024159,
                                               2.00544234, 1.62260202, 1.80692562, 2.18374028, 2.04030024]}

        TS = {'regret': [158.7252 ,272.846 , 377.652 , 481.4392,
        562.2912, 672.7588 ,762.2116, 858.5032, 934.1072 , 1044.7212],
                   'standardError': [3.66455689 , 4.06153115 , 6.97285266,
        8.27018924 , 11.02026969, 12.88247287,
        11.80161432 ,16.63171256 ,17.54814778 ,24.16399333],
                   'cumReg': [21.0944 ,28.1644 ,33.1996 , 37.3392,
        43.8232, 46.5088, 52.16 ,  53.9064 ,57.858, 59.3684],
                   'standardError_cumReg': [0.80722835 , 1.05387973 ,1.2217753,
        1.35071133 ,1.91220922, 1.62777514,
        1.84135993 , 2.40475452, 1.92861237, 2.66048748]}


        # BAI_ETC = {'regret': [414.7868  ,759.6912 ,1061.7624,
        # 1374.8176 ,1660.5168 , 1958.6036, 2230.3876,
        # 2514.0276 ,2815.508 ,3062.2936],
        #            'standardError': [2.73398713 , 5.78280016 ,  8.64533816,
        # 11.16795315,  9.08824157 ,16.23198425,
        # 19.64800449, 13.27106339 ,20.21784437, 24.65986965],
        #            'cumReg': [51.838 ,  74.3724 , 91.1344 ,  105.4552,
        # 116.1392 , 129.6028 , 139.1632 , 150.6468, 161.0628, 169.062],
        #            'standardError_cumReg': [0.63019495,  0.88501551, 1.24706568,
        # 1.62976117,  1.57622709, 1.90432006,
        # 2.16543556, 2.18757785, 2.27256761, 2.14053184]}
        plot_fixed_m(4, np.array([2]), np.arange(1, 11) * 4000, naiveUCB1_, TS, ADAETC_, _, _, _, _, _, params_, _)
        plot_fixed_m(5, np.array([2]), np.arange(1, 11) * 4000, naiveUCB1_, TS, ADAETC_, _, _, _, _, _, params_, _)

    if what == 'oneHalf':
        # \sqrt(1/T), improved UCB1, ucbpart = 1
        _ = None
        params_ = {'numOpt': 1, 'alpha': 0, 'totalSim': 50, 'numArmDists': 50, 'c': 4, 'delta': 0, 'm': 1,
                   'Switch': 'no', 'NADA': 'no'}

        ADAETC_ = {'regret': [97.5164, 151.4216, 194.9364, 236.412 , 272.4296, 302.5492, 338.1156, 368.3088,
        395.8652, 415.9624],
                   'standardError': [1.07559423 ,1.46838827 ,1.53084956 ,1.62199453 ,1.96503584, 1.92739494,
        2.38879908, 2.3789014,  3.17494042 ,3.04434078],
                   'cumReg': [26.114,  37.5064, 46.1892 ,55.238 , 61.8116 ,65.7916 ,74.2252 ,80.4696, 83.3824,
        81.7276],
                   'standardError_cumReg': [1.06373053, 1.34378932 ,1.5213265 , 1.55230494, 1.7607603  ,1.76695925,
        2.31604303, 2.15025559 ,3.01808054 ,2.81061393]}

        # with improved UCB
        # naiveUCB1_ = {'regret': [630.4708, 1260.9296, 1887.288,
        #                          2506.0288, 3173.804,  3748.0984,
        #                          4330.356, 5039.61,
        #                          5664.2916, 6340.9052],
        #               'standardError': [4.3762902,   9.07352097, 15.13254789 ,
        #                                 19.30916686, 23.59468447, 25.85185779,
        #                                 32.67630894, 36.7469925, 41.94288796, 41.58926675],
        #
        #               'cumReg': [21.5584, 30.5076, 37.8444,
        #                          45.66, 49.8888, 54.6104,
        #                          55.944, 59.3684,
        #                          65.2064, 65.4948],
        #
        #               'standardError_cumReg': [0.65557543, 0.87491968, 1.11504106,
        #                                        1.41580032, 1.30318038, 1.49532597,
        #                                        1.50990638, 1.65321477,
        #                                        2.02998266, 2.30605601]}

        # without improved UCB
        naiveUCB1_ = {'regret': [741.1876, 1482.1128, 2245.7148, 3001.7148, 3792.66, 4549.6244,
                                 5305.6704, 6031.706, 6785.908, 7580.4696],
                      'standardError': [4.19670102, 7.68843807, 11.11647714, 13.98163389, 18.67318518, 22.36133991,
                                        23.6840837, 26.73967217, 30.45294621, 33.84822365],

                      'cumReg': [24.5896, 35.5868, 43.1524, 48.0516, 56.6872, 62.2268,
                                 66.5704, 71.5056, 74.15, 79.0012],

                      'standardError_cumReg': [0.52125947, 0.76890605, 1.26130636, 1.26429593, 1.60783808, 1.38757672,
                                               1.6128151, 1.58880333, 1.90760082, 2.05404774]}


        TS = {'regret': [470.8328,  927.4832 ,1392.3784 ,1854.382 , 2361.9224, 2791.6456, 3156.176,
        3593.1492, 4206.51 ,  4625.9212],
                   'standardError': [5.66695595 ,11.36099638, 15.17637434, 24.14649594, 27.99723975, 31.50112148,
        37.88810656, 47.43666132, 50.51807718, 70.90713375],
                   'cumReg': [19.7404, 30.2608, 37.3056 ,41.484 , 47.7572 ,54.9268, 56.1792 ,62.7132 ,66.9092,
        66.3852],
                   'standardError_cumReg': [0.70153032 ,1.02419326 ,1.24305341 ,1.51641651, 1.5811615 , 1.89170185,
        1.8662816  ,2.12419514, 2.06790686 ,1.7672544 ]}

        # BAI_ETC = {'regret': [834.0208 ,1627.1156, 2461.3596, 3256.86 ,  4069.2488, 4864.5528 ,5703.3144,
        # 6454.8412, 7344.234 , 8108.0912],
        #       'standardError': [3.7035998,   6.27304025 ,10.55710849, 13.29890314, 16.47365265, 26.8346309,
        # 20.63102387 ,28.79485515, 30.25749889 ,31.40073152],
        #       'cumReg': [26.79 ,  35.9132, 46.7516, 52.8188, 60.8248, 63.9256, 70.492,  78.0236, 80.3424,
        # 84.92],
        #       'standardError_cumReg': [0.67708889 ,0.95783065 ,1.06015049, 1.47891392, 1.37720535, 1.50574548,
        # 1.44731553 ,1.74474688, 1.84977937, 2.15997496]}

        plot_fixed_m(4, np.array([2]), np.arange(1, 11) * 4000, naiveUCB1_, TS, ADAETC_, _, _, _, _, _, params_,
                     _)
        plot_fixed_m(5, np.array([2]), np.arange(1, 11) * 4000, naiveUCB1_, TS, ADAETC_, _, _, _, _, _, params_,
                     _)

    if what == 'mEq1_prev':
        _ = None
        # m  1  K  [4]  alpha 0, ucb1 ucb part 1, ucb1-s ucb part 1, TS fixed, ucb's not improved
        params_ = {'numOpt': 1, 'alpha': 0, 'totalSim': 50, 'numArmDists': 100, 'c': 4, 'delta': 0, 'm': 1,
                   'Switch': 'no', 'NADA': True}

        ADAETC_ = {'regret': [33.18338931, 52.31658107, 68.43497594, 82.47707975, 96.14412878,
                              110.34861576, 122.01887601, 133.29595775, 145.64499129, 156.01986138],
                   'standardError': [0.12948101, 0.24176842, 0.33453719, 0.45480541, 0.53694521, 0.64404351,
                                     0.7779779, 0.82217835, 0.90784191, 1.08282302]}

        ETC_ = {'regret': [36.37418931, 57.87338107, 79.36117594, 91.84267975, 104.93212878,
                           125.84961576, 137.09007601, 149.11395775, 161.48479129, 174.03786138],
                'standardError': [0.11016058, 0.22345959, 0.30490043, 0.45218224, 0.55845303, 0.64512597,
                                  0.73714322, 0.79385192, 0.84045082, 1.05928793]}

        # UCB1_stopping_ = {'regret': [36.35858931 , 57.52558107 , 78.97157594,  91.39127975, 104.22972878,
        # 124.89841576 ,136.23387601, 148.70055775 ,160.65499129, 172.94606138],
        #                          'standardError': [0.12358146 ,0.22324569, 0.29569076 ,0.42020761, 0.53385958, 0.61188381,
        # 0.69275685 ,0.83742607, 0.86710598, 1.13748037]}

        # NADA-ETC
        UCB1_stopping_ = {'regret': [36.35858931, 57.52558107, 78.97157594, 91.39127975, 104.22972878,
                                     124.89841576, 136.23387601, 148.70055775, 160.65499129, 172.94606138],
                          'standardError': [0.12358146, 0.22324569, 0.29569076, 0.42020761, 0.53385958, 0.61188381,
                                            0.69275685, 0.83742607, 0.86710598, 1.13748037]}

        TS = {'regret': [46.29666933, 93.60270344, 140.32572755, 185.12645218, 230.91333042,
                         274.8363756, 318.82480781, 359.2876827, 401.94071909, 445.81580262],
              'standardError': [0.10168241, 0.18013066, 0.28500282, 0.35164702, 0.48411746, 0.63082522,
                                0.72501946, 0.84840867, 1.0432478, 1.20169234]}

        naiveUCB1_ = {'regret': [50.11778931, 100.54478107, 151.09477594, 201.34747975, 250.91392878,
                                 300.51161576, 349.74507601, 397.21615775, 446.79339129, 492.92506138],
                      'standardError': [0.11454749, 0.20342901, 0.28539431, 0.39425128, 0.48250223, 0.56272449,
                                        0.65247194, 0.82279293, 0.77109717, 0.9852433]}
        for i in range(2):
            plot_fixed_m(i, [4], np.arange(1, 11) * 100, naiveUCB1_, TS, ADAETC_, ETC_,
                         UCB1_stopping_, _, params_)
        # m  1  K [4]  alpha 0, ucb1 ucb part 1, ucb1-s ucb part 1, TS fixed, ucb's not improved

        # ucb1 ucb part 1, ucb1-s ucb part 1, K=4, m=1, alpha 0.4
        params_ = {'numOpt': 1, 'alpha': 0.4, 'totalSim': 50, 'numArmDists': 100, 'c': 4, 'delta': 0, 'm': 1,
                   'Switch': 'no', 'NADA': True}

        ADAETC_ = {'regret': [15.25433703, 25.33098311, 33.97528183, 41.52819014, 48.03985663, 55.14299334,
                              61.29134819, 67.14812744, 72.98409498, 76.64795117],
                   'standardError': [0.17002385, 0.31020359, 0.44280644, 0.51516628, 0.53786223, 0.59329139,
                                     0.71770741, 0.79729703, 0.80579127, 0.90315057]}

        ETC_ = {'regret': [16.29433703, 27.55718311, 37.13148183, 45.58099014, 52.17665663, 60.84499334,
                           68.48134819, 74.18352744, 80.12069498, 85.11175117],
                'standardError': [0.168818, 0.3154799, 0.48984735, 0.55133501, 0.60946211, 0.6430282,
                                  0.74267684, 0.91232267, 0.94349708, 0.97821819]}

        UCB1_stopping_ = {'regret': [16.19673703, 26.79398311, 35.98188183, 44.67919014, 51.25085663, 60.03599334,
                                     66.56854819, 72.36452744, 78.78969498, 84.01855117],
                          'standardError': [0.16882339, 0.29749599, 0.47216451, 0.55223636, 0.5158369, 0.63476479,
                                            0.7098231, 0.87392371, 0.84738431, 0.99690469]}

        TS = {'regret': [27.02597703, 52.14840297, 75.31109814, 96.71162106, 114.69947701,
                         135.02855631, 152.56567044, 169.72029239, 185.85592553, 199.99572807],
              'standardError': [0.19665979, 0.33466937, 0.62715554, 1.04291373, 1.43272713, 1.94075997,
                                2.11505782, 2.97720407, 3.80586403, 3.83817979]}

        naiveUCB1_ = {'regret': [32.21093703, 63.11138311, 90.01088183, 118.63019014, 146.83465663,
                                 170.72459334, 193.32314819, 217.39572744, 240.92429498, 264.24275117],
                      'standardError': [0.20297522, 0.36631991, 0.64390447, 1.09150944, 1.29867765, 1.77750656,
                                        2.1767305, 2.62542043, 3.92387205, 4.31459976]}
        for i in range(2):
            plot_fixed_m(i, [4], np.arange(1, 11) * 100, naiveUCB1_, TS, ADAETC_, ETC_,
                         UCB1_stopping_, _, params_)

        # m  1  K  [8]  alpha 0.4, ucb1 ucb part 1, ucb1-s ucb part 1, TS fixed
        params_ = {'numOpt': 1, 'alpha': 0.4, 'totalSim': 50, 'numArmDists': 100, 'c': 4, 'delta': 0, 'm': 1,
                   'Switch': 'no', 'NADA': True}

        ADAETC_ = {'regret': [23.88962866, 38.51923453, 49.84768743, 61.48033617, 71.55006443,
                              82.33626449, 90.60909347, 101.73779464, 110.47363376, 118.47969561],
                   'standardError': [0.1431651, 0.27592046, 0.37607909, 0.49696634, 0.63701979, 0.72512034,
                                     0.69956845, 0.92487489, 0.85983099, 1.15266311]}

        ETC_ = {'regret': [25.91282866, 42.35923453, 56.16068743, 67.86633617, 78.03046443,
                           90.13506449, 99.95969347, 112.47999464, 122.43083376, 129.15509561],
                'standardError': [0.14559987, 0.26798601, 0.39993914, 0.53946785, 0.62124442, 0.78018726,
                                  0.70957291, 0.9226152, 1.01552992, 1.09289675]}

        UCB1_stopping_ = {'regret': [25.70542866, 41.67283453, 55.29108743, 67.22113617, 77.63566443,
                                     89.36306449, 98.42669347, 111.42419464, 121.16123376, 127.40709561],
                          'standardError': [0.13833021, 0.25235302, 0.37719631, 0.53691371, 0.65850888, 0.81046661,
                                            0.73281003, 0.92415097, 0.96128808, 1.06827022]}

        TS = {'regret': [38.32630304, 76.66066346, 112.41898962, 146.6592559, 180.4333807,
                         213.9925078, 245.06543578, 276.4510733, 305.59403368, 334.78967119],
              'standardError': [0.1737255, 0.29467446, 0.45470733, 0.65132569, 0.90048692, 1.14880418,
                                1.39004835, 1.65242656, 2.39301206, 2.63847619]}

        naiveUCB1_ = {'regret': [43.30182866, 86.74303453, 127.45468743, 169.32073617, 210.26046443,
                                 247.64846449, 288.07349347, 324.72339464, 363.68103376, 399.92569561],
                      'standardError': [0.15341162, 0.25308285, 0.45317571, 0.62495788, 0.73347623, 1.04186642,
                                        1.0815408, 1.60320545, 1.60972517, 1.87656087]}

        for i in range(2):
            plot_fixed_m(i, [8], np.arange(1, 11) * 100, naiveUCB1_, TS, ADAETC_, ETC_,
                         UCB1_stopping_, _, params_)

        # exit()

        # m  1  K  [8]  alpha 0, ucb1 ucb part 1, ucb1-s ucb part 1
        params_ = {'numOpt': 1, 'alpha': 0, 'totalSim': 50, 'numArmDists': 100, 'c': 4, 'delta': 0, 'm': 1,
                   'Switch': 'no', 'NADA': True}

        ADAETC_ = {'regret': [34.71033939, 50.73849568, 61.86105698, 69.81502649, 79.21277977,
                              87.85165904, 93.2042181, 99.14853286, 107.51977064, 113.35654375],
                   'standardError': [.37914801, 0.51665245, 0.72083204, 0.91943897, 1.01709668, 1.16517188,
                                     1.29046928, 1.58770478, 1.68862638, 1.91917789]}

        ETC_ = {'regret': [40.93953939, 61.98009568, 80.72025698, 93.12982649, 109.55977977,
                           121.88405904, 133.3342181, 145.14513286, 160.11657064, 167.61654375],
                'standardError': [0.40197775, 0.51266112, 0.72712058, 1.00628601, 0.80721342, 0.89701736,
                                  1.26046739, 1.52607431, 1.54054948, 1.39181053]}

        UCB1_stopping_ = {'regret': [38.15673939, 54.50689568, 68.00765698, 76.52922649, 86.30877977,
                                     94.98745904, 100.8822181, 107.80893286, 116.52577064, 120.50954375],
                          'standardError': [0.3879759, 0.55625926, 0.76359597, 0.96418431, 1.13763914, 1.37725333,
                                            1.4851061, 1.8300171, 2.08726636, 2.15514315]}

        TS = {'regret': [37.12893939, 63.06309568, 83.00685698, 117.09942649, 128.74657977,
                         141.83625904, 175.8098181, 202.23753286, 233.53197064, 263.15494375],
              'standardError': [2.06554644, 4.49224934, 6.17842646, 9.60765373, 11.63526103, 11.66972243,
                                16.4155601, 17.23074508, 19.05305493, 23.33737503]}

        naiveUCB1_ = {'regret': [57.69753939, 101.05069568, 135.88325698, 158.27622649, 190.13957977,
                                 207.88965904, 235.4898181, 246.53133286, 304.34657064, 306.11734375],
                      'standardError': [0.85103408, 2.18678093, 3.43870448, 4.47966319, 5.94924952, 7.78663758,
                                        9.01011964, 10.71469655, 12.70740855, 13.79260468]}
        for i in range(2):
            plot_fixed_m(i, [8], np.arange(1, 11) * 100, naiveUCB1_, TS, ADAETC_, ETC_,
                         UCB1_stopping_, _, params_)
